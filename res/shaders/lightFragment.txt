#version 400

in vec2 texCoord0;
in vec3 normal0;
in vec3 worldPos0;

struct Light {
	vec3 color;
	vec3 intensity;
};

struct DirectionalLight {
	Light light;
	vec3 direction;
};

uniform vec3 color;
uniform vec3 ambient;
uniform sampler2D sampler;
uniform DirectionalLight gDirectionalLight;

uniform vec3 eyePosition;
uniform float specularIntensity;
uniform float specularPower;


void main(){
	vec4 texColor = texture2D(sampler, texCoord0.xy) * vec4(color, 1.0);
	
	vec4 diffuseColor = vec4(0,0,0,0);
	vec4 specularColor = vec4(0,0,0,0);
	vec3 normal = normalize(normal0);
	float diffuseFactor = dot(normal, -gDirectionalLight.direction);
	if(diffuseFactor > 0){
		diffuseColor = vec4(gDirectionalLight.light.color, 1.0) * vec4(gDirectionalLight.light.intensity, 1.0) * diffuseFactor;
		
		vec3 vectorToEye = normalize(eyePosition - worldPos0);
		vec3 lightReflect = normalize(reflect(gDirectionalLight.light.color, normal));
		float specularFactor = dot(vectorToEye, lightReflect);
		specularFactor = pow(specularFactor, specularPower);
		if(specularFactor > 0){
			specularColor = vec4(gDirectionalLight.light.color, 1.0) * specularIntensity * specularFactor;
		}
	}
	gl_FragColor = texColor * (ambient + diffuseColor + specularColor);
}